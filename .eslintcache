[{"/Users/abraham/graph-editor/src/index.js":"1","/Users/abraham/graph-editor/src/App.js":"2","/Users/abraham/graph-editor/src/Canvas.js":"3","/Users/abraham/graph-editor/src/Stuff.js":"4","/Users/abraham/graph-editor/src/Edge.js":"5","/Users/abraham/graph-editor/src/Node.js":"6"},{"size":152,"mtime":1611711971020,"results":"7","hashOfConfig":"8"},{"size":3765,"mtime":1612984432891,"results":"9","hashOfConfig":"8"},{"size":1525,"mtime":1613025075759,"results":"10","hashOfConfig":"8"},{"size":1113,"mtime":1612984475454,"results":"11","hashOfConfig":"8"},{"size":535,"mtime":1613020344885,"results":"12","hashOfConfig":"8"},{"size":1886,"mtime":1612991766393,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"14828u7",{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/abraham/graph-editor/src/index.js",[],["29","30"],"/Users/abraham/graph-editor/src/App.js",["31","32","33","34"],"import React, { Component } from 'react';\n\nimport Canvas from \"./Canvas\";\nimport { getRandom, isColor, divideByTokens } from \"./Stuff\";\nimport \"./styles.css\"\nimport \"./button.css\"\n\nconst defaultColorNode = '#c9a9ff'\n\nclass App extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      nodes: [],\n      nodesColor: new Map(),\n      edgesSet: new Set(),\n      drawTrie: false,\n      drawGraph: true,\n    }\n  }\n\n  getInput(e) {\n    this.setState((prev) => {\n      const objects = e.target.value.split('\\n').map((line) => {\n        return divideByTokens(line);\n      });\n\n      var nodesColor = new Map();\n      var edgesSet = new Set()\n\n      function addNode(node, color = defaultColorNode) {\n        nodesColor.set(node, color); // update color or set it for first time \n      }\n\n      function addEdge(from, to, weight) {\n        // Adds the edges to a set to use them later\n        if (!nodesColor.has(from))\n          addNode(from);\n        if (!nodesColor.has(to))\n          addNode(to);\n        edgesSet.add({ from, to, weight });\n      }\n\n      /*\n        u\n        u color\n        u v\n        u v weight\n      */\n\n      // Add all the current objects\n      for (var object of objects) {\n        if (object.length == 0)\n          continue;\n\n        if (object.length == 1) {\n          const u = object[0];\n          // Single node\n          addNode(u);\n        } else if (object.length == 2) {\n          const u = object[0];\n          const x = object[1];\n          if (isColor(x)) {\n            // Node with color x\n            addNode(u, x);\n          } else {\n            // Edge u -> v (depends on the flag)\n            const v = object[1];\n            addEdge(u, v, \"\");\n          }\n        } else if (object.length == 3) {\n          // Edge u -> v with weight\n          const u = object[0];\n          const v = object[1];\n          const weight = object[2];\n          addEdge(u, v, weight);\n        }\n      }\n\n      console.log(nodesColor);\n      console.log(edgesSet);\n\n      function findNode(nodes, u) {\n        // Finds the node 'u' in the current 'nodes' array\n        var pos = nodes.map((node) => {\n          return node.text;\n        }).indexOf(u);\n\n        return nodes[pos];\n      }\n\n      // Calculate things in common (get current objects from previous objects)\n      var nodes = []\n      for (var [u, color] of nodesColor) {\n        if (prev.nodesColor.has(u)) {\n          // node in common with the previous version\n          var node = findNode(prev.nodes, u);\n          node.color = color;\n          nodes.push(node);\n        } else {\n          // create a completely new node\n          const x = getRandom(0, 400);\n          const y = getRandom(0, 400);\n          nodes.push({ x, y, r: 25, color, text: u });\n        }\n      }\n\n      return {\n        nodesColor: nodesColor,\n        edgesSet: edgesSet,\n        nodes: nodes,\n      }\n    });\n  }\n\n  drawGraphButton(e) {\n    this.setState({\n      drawGraph: true,\n      drawTrie: false\n    });\n  }\n\n  drawTrieButton(e) {\n    this.setState({\n      drawGraph: false,\n      drawTrie: true\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"multi-button\">\n          <button>Graph editor</button>\n\n          <button onClick={this.drawGraphButton.bind(this)} >\n            Draw Graph\n          </button>\n\n          <button onClick={this.drawTrieButton.bind(this)}>\n            Draw trie\n          </button>\n        </div>\n\n        <div>\n          <textarea\n            type=\"text\"\n            className=\"input\"\n            onChange={this.getInput.bind(this)}\n          >\n          </textarea>\n\n          <Canvas\n            nodes={this.state.nodes}\n            edges={this.state.edgesSet} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","/Users/abraham/graph-editor/src/Canvas.js",["35"],"/Users/abraham/graph-editor/src/Stuff.js",["36","37","38","39","40","41","42","43","44"],"import React from \"react\";\n\nexport function getRandom(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nexport function isNumeric(num) {\n  return !isNaN(num)\n}\n\nexport function isColor(x) {\n  let s = new Option().style\n  s.color = x\n  let test1 = s.color == x\n  let test2 = /^#[0-9A-F]{6}$/i.test(x)\n  return (test1 == true || test2 == true)\n}\n\nexport function isSpace(c) {\n  return (c == ' ') || (c == '\\t');\n}\n\nexport function divideByTokens(str) {\n  var result = [];\n  var last = \"\";\n  for (var i in str) {\n    var c = str[i];\n    if (isSpace(c)) {\n      if (last != \"\") {\n        result.push(last);\n      }\n      last = \"\";\n    } else {\n      last += c;\n    }\n  }\n  if (last != \"\") {\n    result.push(last);\n  }\n  return result;\n}\n\nexport function pickTextColor(bgColor) {\n  var color = bgColor.charAt(0) == '#' ? bgColor.substring(1, 7) : bgColor;\n  var r = parseInt(color.substring(0, 2), 16); // hexToR\n  var g = parseInt(color.substring(2, 4), 16); // hexToG\n  var b = parseInt(color.substring(4, 6), 16); // hexToB\n  return (((r * 0.299) + (g * 0.587) + (b * 0.114)) > 186) ? \"black\" : \"white\";\n}","/Users/abraham/graph-editor/src/Edge.js",["45","46"],"/Users/abraham/graph-editor/src/Node.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":54,"column":27,"nodeType":"53","messageId":"54","endLine":54,"endColumn":29},{"ruleId":"51","severity":1,"message":"52","line":57,"column":27,"nodeType":"53","messageId":"54","endLine":57,"endColumn":29},{"ruleId":"51","severity":1,"message":"52","line":61,"column":34,"nodeType":"53","messageId":"54","endLine":61,"endColumn":36},{"ruleId":"51","severity":1,"message":"52","line":72,"column":34,"nodeType":"53","messageId":"54","endLine":72,"endColumn":36},{"ruleId":"51","severity":1,"message":"55","line":18,"column":20,"nodeType":"53","messageId":"54","endLine":18,"endColumn":22},{"ruleId":"56","severity":1,"message":"57","line":1,"column":8,"nodeType":"58","messageId":"59","endLine":1,"endColumn":13},{"ruleId":"51","severity":1,"message":"52","line":14,"column":23,"nodeType":"53","messageId":"54","endLine":14,"endColumn":25},{"ruleId":"51","severity":1,"message":"52","line":16,"column":17,"nodeType":"53","messageId":"54","endLine":16,"endColumn":19},{"ruleId":"51","severity":1,"message":"52","line":16,"column":34,"nodeType":"53","messageId":"54","endLine":16,"endColumn":36},{"ruleId":"51","severity":1,"message":"52","line":20,"column":13,"nodeType":"53","messageId":"54","endLine":20,"endColumn":15},{"ruleId":"51","severity":1,"message":"52","line":20,"column":27,"nodeType":"53","messageId":"54","endLine":20,"endColumn":29},{"ruleId":"51","severity":1,"message":"55","line":29,"column":16,"nodeType":"53","messageId":"54","endLine":29,"endColumn":18},{"ruleId":"51","severity":1,"message":"55","line":37,"column":12,"nodeType":"53","messageId":"54","endLine":37,"endColumn":14},{"ruleId":"51","severity":1,"message":"52","line":44,"column":33,"nodeType":"53","messageId":"54","endLine":44,"endColumn":35},{"ruleId":"60","severity":1,"message":"61","line":4,"column":3,"nodeType":"62","messageId":"63","endLine":6,"endColumn":4},{"ruleId":"51","severity":1,"message":"55","line":10,"column":20,"nodeType":"53","messageId":"54","endLine":10,"endColumn":22},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]