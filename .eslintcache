[{"/Users/abraham/graph-editor/src/index.js":"1","/Users/abraham/graph-editor/src/App.js":"2","/Users/abraham/graph-editor/src/Canvas.js":"3","/Users/abraham/graph-editor/src/Stuff.js":"4","/Users/abraham/graph-editor/src/Edge.js":"5","/Users/abraham/graph-editor/src/Node.js":"6"},{"size":152,"mtime":1611711971020,"results":"7","hashOfConfig":"8"},{"size":4286,"mtime":1613943608117,"results":"9","hashOfConfig":"8"},{"size":2472,"mtime":1613939524515,"results":"10","hashOfConfig":"8"},{"size":2306,"mtime":1613938012092,"results":"11","hashOfConfig":"8"},{"size":1763,"mtime":1613940286954,"results":"12","hashOfConfig":"8"},{"size":2233,"mtime":1613938131689,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"14828u7",{"filePath":"17","messages":"18","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/abraham/graph-editor/src/index.js",[],["29","30"],"/Users/abraham/graph-editor/src/App.js",["31","32","33","34","35"],"/Users/abraham/graph-editor/src/Canvas.js",["36"],"import React, { Component } from \"react\";\nimport { getRandom } from \"./Stuff\";\nimport Node from \"./Node\";\nimport { Edge } from \"./Edge\";\n\nimport \"./styles.css\"\n\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      nodesInfo: [],\n      printableNodes: [],\n    };\n  }\n\n  updatePosition = (text, x, y) => {\n    const nodesInfo = this.state.nodesInfo.map((node) => {\n      if (node.text === text) {\n        node.x = x;\n        node.y = y;\n      }\n      return node;\n    });\n\n    this.setState({\n      nodesInfo: nodesInfo\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props !== prevProps) {\n      var nodesInfo = []\n      for (var [nodeText, color] of this.props.nodesColor) {\n        if (prevProps.nodesColor.has(nodeText)) {\n          // node in common with the previous version\n          var prevNode = this.state.nodesInfo.find(node => {\n            return node.text === nodeText;\n          });\n          // just update the color\n          prevNode.color = color;\n          nodesInfo.push(prevNode);\n        } else {\n          // create a completely new node\n          nodesInfo.push({ \n            x: getRandom(25, 800), \n            y: getRandom(25, 600), \n            color: color, \n            text: nodeText \n          });\n        }\n      }\n      \n      // Create nodes to be printed\n      const printableNodes = nodesInfo.map(node => {\n        return (\n          <Node\n            key={node.text}\n            x={node.x} y={node.y}\n            color={node.color}\n            text={node.text}\n            updatePosition={this.updatePosition} />\n        );\n      });\n\n      this.setState({\n        nodesInfo: nodesInfo,\n        printableNodes: printableNodes\n      });\n    } \n  }\n\n  render() {\n    return (\n      <svg className=\"image\">\n        {\n          this.props.edges.map((edge) => {\n            console.log(edge);\n            const from = this.state.nodesInfo.find(node => {\n              return node.text === edge[0].from;\n            });\n            const to = this.state.nodesInfo.find(node => {\n              return node.text === edge[0].to;\n            });\n      \n            return (\n              <Edge \n                from={from} to={to} \n                weight={edge[1].weight} \n                color={edge[1].color}\n                directed={this.props.directed} />\n            );\n          })\n        }\n\n        {this.state.printableNodes}\n      </svg>\n    );\n  }\n}\n\nexport default Canvas;","/Users/abraham/graph-editor/src/Stuff.js",["37","38","39","40","41","42","43","44","45","46","47","48","49"],"import React from \"react\";\n\nexport function getRandom(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nexport function isNumeric(num) {\n  return !isNaN(num)\n}\n\nexport function isColor(x) {\n  let s = new Option().style\n  s.color = x\n  let test1 = s.color == x\n  let test2 = /^#[0-9A-F]{6}$/i.test(x)\n  return (test1 == true || test2 == true)\n}\n\nexport function isSpace(c) {\n  return (c == ' ') || (c == '\\t');\n}\n\nexport function divideByTokens(str) {\n  var result = [];\n  var last = \"\";\n  for (var i in str) {\n    var c = str[i];\n    if (isSpace(c)) {\n      if (last != \"\") {\n        result.push(last);\n      }\n      last = \"\";\n    } else {\n      last += c;\n    }\n  }\n  if (last != \"\") {\n    result.push(last);\n  }\n  return result;\n}\n\nexport function isLight(col) {\n  var cur = col.charAt(0) == '#' ? col.substring(1, 7) : col;\n  var r = parseInt(cur.substring(0, 2), 16); // hexToR\n  var g = parseInt(cur.substring(2, 4), 16); // hexToG\n  var b = parseInt(cur.substring(4, 6), 16); // hexToB\n  return (((r * 0.299) + (g * 0.587) + (b * 0.114)) > 186);\n}\n\nexport function pickTextColor(col) {\n  return isLight(col) ? \"black\" : \"white\";\n}\n\nfunction getRGB(v) {\n  var el = document.createElement(\"div\");\n  el.style[\"background-color\"] = v;\n  document.body.appendChild(el);\n\n  var style = window.getComputedStyle(el);\n  var color = style[\"backgroundColor\"];\n  document.body.removeChild(el);\n\n  return color;\n}\n\nfunction parseColor(color) {\n  var arr=[]; \n  color.replace(/[\\d+\\.]+/g, function(v) { \n    arr.push(parseFloat(v));\n  });\n  return \"#\" + arr.slice(0, 3).map(toHex).join(\"\");\n}\n\nfunction toHex(int) {\n  var hex = int.toString(16);\n  return hex.length == 1 ? \"0\" + hex : hex;\n}\n\nexport function lightenColor(col, amt) {\n  if (col.charAt(0) != '#') {\n    col = parseColor(getRGB(col));\n  }\n  \n  var cur = col.charAt(0) == '#' ? col.substring(1, 7) : col;\n  \n  var r = Math.max(Math.min(255, parseInt(cur.substring(0, 2), 16) + amt), 0).toString(16)\n  var g = Math.max(Math.min(255, parseInt(cur.substring(2, 4), 16) + amt), 0).toString(16)\n  var b = Math.max(Math.min(255, parseInt(cur.substring(4, 6), 16) + amt), 0).toString(16)\n  \n  const rr = (r.length < 2 ? '0' : '') + r\n  const gg = (g.length < 2 ? '0' : '') + g\n  const bb = (b.length < 2 ? '0' : '') + b\n  return `#${rr}${gg}${bb}`\n}","/Users/abraham/graph-editor/src/Edge.js",[],"/Users/abraham/graph-editor/src/Node.js",[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":66,"column":27,"nodeType":"56","messageId":"57","endLine":66,"endColumn":29},{"ruleId":"54","severity":1,"message":"55","line":69,"column":27,"nodeType":"56","messageId":"57","endLine":69,"endColumn":29},{"ruleId":"54","severity":1,"message":"55","line":73,"column":34,"nodeType":"56","messageId":"57","endLine":73,"endColumn":36},{"ruleId":"54","severity":1,"message":"55","line":84,"column":34,"nodeType":"56","messageId":"57","endLine":84,"endColumn":36},{"ruleId":"54","severity":1,"message":"55","line":96,"column":34,"nodeType":"56","messageId":"57","endLine":96,"endColumn":36},{"ruleId":"58","severity":1,"message":"59","line":38,"column":52,"nodeType":"60","messageId":"61","endLine":40,"endColumn":12},{"ruleId":"62","severity":1,"message":"63","line":1,"column":8,"nodeType":"64","messageId":"65","endLine":1,"endColumn":13},{"ruleId":"54","severity":1,"message":"55","line":14,"column":23,"nodeType":"56","messageId":"57","endLine":14,"endColumn":25},{"ruleId":"54","severity":1,"message":"55","line":16,"column":17,"nodeType":"56","messageId":"57","endLine":16,"endColumn":19},{"ruleId":"54","severity":1,"message":"55","line":16,"column":34,"nodeType":"56","messageId":"57","endLine":16,"endColumn":36},{"ruleId":"54","severity":1,"message":"55","line":20,"column":13,"nodeType":"56","messageId":"57","endLine":20,"endColumn":15},{"ruleId":"54","severity":1,"message":"55","line":20,"column":27,"nodeType":"56","messageId":"57","endLine":20,"endColumn":29},{"ruleId":"54","severity":1,"message":"66","line":29,"column":16,"nodeType":"56","messageId":"57","endLine":29,"endColumn":18},{"ruleId":"54","severity":1,"message":"66","line":37,"column":12,"nodeType":"56","messageId":"57","endLine":37,"endColumn":14},{"ruleId":"54","severity":1,"message":"55","line":44,"column":27,"nodeType":"56","messageId":"57","endLine":44,"endColumn":29},{"ruleId":"67","severity":1,"message":"68","line":69,"column":22,"nodeType":"69","messageId":"70","endLine":69,"endColumn":23,"suggestions":"71"},{"ruleId":"54","severity":1,"message":"55","line":77,"column":21,"nodeType":"56","messageId":"57","endLine":77,"endColumn":23},{"ruleId":"54","severity":1,"message":"66","line":81,"column":21,"nodeType":"56","messageId":"57","endLine":81,"endColumn":23},{"ruleId":"54","severity":1,"message":"55","line":85,"column":27,"nodeType":"56","messageId":"57","endLine":85,"endColumn":29},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'nodeText'.","ArrowFunctionExpression","unsafeRefs","no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","Expected '!==' and instead saw '!='.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["74","75"],"no-global-assign","no-unsafe-negation",{"messageId":"76","fix":"77","desc":"78"},{"messageId":"79","fix":"80","desc":"81"},"removeEscape",{"range":"82","text":"83"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"84","text":"85"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[1482,1483],"",[1482,1482],"\\"]