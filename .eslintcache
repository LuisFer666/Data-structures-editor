[{"/Users/abraham/Graph-editor/src/index.js":"1","/Users/abraham/Graph-editor/src/App.js":"2","/Users/abraham/Graph-editor/src/Trie.js":"3","/Users/abraham/Graph-editor/src/Canvas.js":"4","/Users/abraham/Graph-editor/src/Stuff.js":"5","/Users/abraham/Graph-editor/src/Node.js":"6","/Users/abraham/Graph-editor/src/PrettyTree.js":"7","/Users/abraham/Graph-editor/src/Edge.js":"8","/Users/abraham/Graph-editor/src/Geometry.js":"9"},{"size":152,"mtime":1663001068744,"results":"10","hashOfConfig":"11"},{"size":6707,"mtime":1663389519613,"results":"12","hashOfConfig":"11"},{"size":880,"mtime":1663385103893,"results":"13","hashOfConfig":"11"},{"size":6061,"mtime":1663385088183,"results":"14","hashOfConfig":"11"},{"size":2338,"mtime":1663385102456,"results":"15","hashOfConfig":"11"},{"size":2385,"mtime":1663385098521,"results":"16","hashOfConfig":"11"},{"size":6806,"mtime":1663385099724,"results":"17","hashOfConfig":"11"},{"size":3588,"mtime":1663385094378,"results":"18","hashOfConfig":"11"},{"size":938,"mtime":1663385096718,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1g7j663",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/abraham/Graph-editor/src/index.js",[],["41","42"],"/Users/abraham/Graph-editor/src/App.js",[],"/Users/abraham/Graph-editor/src/Trie.js",[],"/Users/abraham/Graph-editor/src/Canvas.js",[],"/Users/abraham/Graph-editor/src/Stuff.js",["43"],"export function getRandom(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nexport function isNumeric(num) {\n  return !isNaN(num)\n}\n\nexport function isColor(x) {\n  let s = new Option().style\n  s.color = x\n  let test1 = s.color === x\n  let test2 = /^#[0-9A-F]{6}$/i.test(x)\n  return (test1 === true || test2 === true)\n}\n\nexport function isDash(x) {\n  return x === \"dash\";\n}\n\nexport function isSpace(c) {\n  return (c === ' ') || (c === '\\t');\n}\n\nexport function divideByTokens(str) {\n  var result = [];\n  var last = \"\";\n  for (var i in str) {\n    var c = str[i];\n    if (isSpace(c)) {\n      if (last !== \"\") {\n        result.push(last);\n      }\n      last = \"\";\n    } else {\n      last += c;\n    }\n  }\n  if (last !== \"\") {\n    result.push(last);\n  }\n  return result;\n}\n\nexport function isLight(col) {\n  var cur = col.charAt(0) === '#' ? col.substring(1, 7) : col;\n  var r = parseInt(cur.substring(0, 2), 16); // hexToR\n  var g = parseInt(cur.substring(2, 4), 16); // hexToG\n  var b = parseInt(cur.substring(4, 6), 16); // hexToB\n  return (((r * 0.299) + (g * 0.587) + (b * 0.114)) > 186);\n}\n\nexport function pickTextColor(col) {\n  return isLight(col) ? \"black\" : \"white\";\n}\n\nfunction getRGB(v) {\n  var el = document.createElement(\"div\");\n  el.style[\"background-color\"] = v;\n  document.body.appendChild(el);\n\n  var style = window.getComputedStyle(el);\n  var color = style[\"backgroundColor\"];\n  document.body.removeChild(el);\n\n  return color;\n}\n\nfunction parseColor(color) {\n  var arr = [];\n  color.replace(/[\\d+\\.]+/g, function (v) {\n    arr.push(parseFloat(v));\n  });\n  return \"#\" + arr.slice(0, 3).map(toHex).join(\"\");\n}\n\nfunction toHex(int) {\n  var hex = int.toString(16);\n  return hex.length === 1 ? \"0\" + hex : hex;\n}\n\nexport function lightenColor(col, amt) {\n  if (col.charAt(0) !== '#') {\n    col = parseColor(getRGB(col));\n  }\n\n  var cur = col.charAt(0) === '#' ? col.substring(1, 7) : col;\n\n  var r = Math.max(Math.min(255, parseInt(cur.substring(0, 2), 16) + amt), 0).toString(16)\n  var g = Math.max(Math.min(255, parseInt(cur.substring(2, 4), 16) + amt), 0).toString(16)\n  var b = Math.max(Math.min(255, parseInt(cur.substring(4, 6), 16) + amt), 0).toString(16)\n\n  const rr = (r.length < 2 ? '0' : '') + r\n  const gg = (g.length < 2 ? '0' : '') + g\n  const bb = (b.length < 2 ? '0' : '') + b\n  return `#${rr}${gg}${bb}`\n}","/Users/abraham/Graph-editor/src/Node.js",[],"/Users/abraham/Graph-editor/src/PrettyTree.js",[],"/Users/abraham/Graph-editor/src/Edge.js",["44","45"],"import React from \"react\"\nimport { NaturalCurve } from \"react-svg-curve\"\nimport { length, dif, sum, mul, divide, unit, perp, rotate, projectionOnCircle } from \"./Geometry\";\n\nexport function Edge(props) {\n  const { delta, from, to, weight, color, directed, dashedLine } = props;\n\n  const radius = 25;\n\n  let bothEndpoints = (from !== undefined && to !== undefined);\n  let midPoint = { x: 0, y: 0 };\n  let fromOnCircle = { x: 0, y: 0 };\n  let toOnCircle = { x: 0, y: 0 };\n\n  if (bothEndpoints) {\n    let half = divide(sum(from, to), 2);\n    let dirHalfPerp = unit(perp(dif(from, half)))\n    midPoint = sum(half, mul(dirHalfPerp, delta));\n\n    fromOnCircle = projectionOnCircle(from, radius, midPoint);\n    toOnCircle = projectionOnCircle(to, radius, midPoint);\n  }\n\n  function getArrow() {\n    let dir = unit(dif(midPoint, toOnCircle));\n\n    // let p = sum(toOnCircle, mul(dir, radius));\n    let start = toOnCircle;\n    let end = sum(toOnCircle, mul(dir, 10));\n    let perpQ = unit(perp(dif(start, end)));\n    let perp1 = sum(end, mul(perpQ, 5));\n    let perp2 = sum(end, mul(perpQ, -5));\n\n    let str =\n      \" M \" + start.x + \",\" + start.y +\n      \" \" + perp1.x + \", \" + perp1.y +\n      \" \" + perp2.x + \" \" + perp2.y + \" z \";\n    // console.log(str);\n\n    return str;\n  }\n\n  const boldEdge = (color === \"black\" ? 1.5 : 3);\n  const dash = dashedLine ? 5 : 0;\n\n  return (\n    <g>\n      {\n        bothEndpoints &&\n        <NaturalCurve\n          data={[\n            [fromOnCircle.x, fromOnCircle.y],\n            [midPoint.x, midPoint.y],\n            [toOnCircle.x, toOnCircle.y],\n          ]}\n          stroke={color}\n          strokeWidth={boldEdge}\n          strokeDasharray={dash}\n          showPoints={false} />\n      }\n\n      {\n        (bothEndpoints && directed) &&\n        <path\n          d={getArrow()}\n          fill={color}\n          stroke={color} />\n      }\n\n      {\n        (bothEndpoints && weight) &&\n        <text\n          x={midPoint.x + 10}\n          y={midPoint.y + 10}\n          fill=\"black\" >\n          {weight}\n        </text>\n      }\n    </g>\n  );\n}\n\nexport function Loop(props) {\n  const { from, to, weight, color, directed } = props;\n\n  let bothEndpoints = (from !== undefined && to !== undefined);\n\n  let textPos = { x: 0, y: 0 };\n  if (bothEndpoints) {\n    textPos.x = (from.x + to.x) / 2;\n    textPos.y = (from.y + to.y) / 2;\n  }\n\n  const boldEdge = (color === \"black\" ? 1.5 : 3);\n  const dx = 0;\n  const dy = -35;\n\n  function getArrow() {\n    let loopOutside = {\n      x: from.x + 20,\n      y: from.y + dy\n    };\n\n    let dir = unit(dif(loopOutside, from));\n\n    let p = {\n      x: loopOutside.x - 5.5,\n      y: loopOutside.y + 13.5\n    };\n    let q = sum(p, mul(dir, 8));\n\n    let perpQ = unit(perp(dif(p, q)));\n    let perp1 = sum(q, mul(perpQ, 5));\n    let perp2 = sum(q, mul(perpQ, -5));\n\n    let str =\n      \" M \" + p.x + \",\" + p.y +\n      \" \" + perp1.x + \", \" + perp1.y +\n      \" \" + perp2.x + \" \" + perp2.y + \" z \";\n    // console.log(str);\n\n    return str;\n  }\n\n  return (\n    <g>\n      {\n        bothEndpoints &&\n        <circle\n          cx={from.x + dx}\n          cy={from.y + dy}\n          r={20}\n          fill=\"none\"\n          stroke={color}\n          strokeWidth={boldEdge}\n        />\n      }\n\n      {\n        (bothEndpoints && directed) &&\n        <path\n          d={getArrow()}\n          fill={color}\n          stroke={color} />\n      }\n\n      {\n        (bothEndpoints && weight) &&\n        <text\n          x={textPos.x + dx}\n          y={textPos.y + 1.8 * dy}\n          fill=\"black\" >\n          {weight}\n        </text>\n      }\n    </g>\n  );\n}","/Users/abraham/Graph-editor/src/Geometry.js",[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":71,"column":22,"nodeType":"52","messageId":"53","endLine":71,"endColumn":23,"suggestions":"54"},{"ruleId":"55","severity":1,"message":"56","line":3,"column":10,"nodeType":"57","messageId":"58","endLine":3,"endColumn":16},{"ruleId":"55","severity":1,"message":"59","line":3,"column":53,"nodeType":"57","messageId":"58","endLine":3,"endColumn":59},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["62","63"],"no-unused-vars","'length' is defined but never used.","Identifier","unusedVar","'rotate' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"64","fix":"65","desc":"66"},{"messageId":"67","fix":"68","desc":"69"},"removeEscape",{"range":"70","text":"71"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"72","text":"73"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[1517,1518],"",[1517,1517],"\\"]